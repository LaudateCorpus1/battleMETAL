/*
battleMETAL
Author: Peter Roohr
Date: 03/8/2017
Overview: 
  GUI API header
*/

float FONT_NUM_ROBOT_LIGHT;
float FONT_NUM_ROBOT_THIN;
float FONT_NUM_ROBOT_REGULAR;
float FONT_NUM_ROBOT_MEDIUM;
float FONT_NUM_DYSTOPIAN;
float drawfont_prev;

entity DEPLOY_POINTS;  //SendEnt now provides the state data;

float OBJECTIVES[32];         //  1 = active, 2 = complete, 0 = hidden, -1 = failed.

string NAVNAMES[21];          //  21, number of unique nav names, see csmain.qc
float NAVNAMES_ACTIVE[21];    //  1 = active, unvisit, 2 = active, visit, 0 = hidden, -1 = inactive.
vector NAVNAMES_ORG[21];      //  server origins for all nav points

string DAT_OTL_UI_IMG;
string DAT_MNT_UI_IMG;
string DAT_MTK_UI_IMG;

//system const
vector VIEW_ORG;
vector VIEW_MAX;
vector VIEW_SIZE;
vector VIEW_CTR;
float VIEW_SCALE;

float VIEW_TOP = 1;
float VIEW_BOT = 2;
float VIEW_LFT = 4;
float VIEW_RGT = 8;
float VIEW_CTX = 16;
float VIEW_CTY = 32;


float AXIS_H = 1;	
float AXIS_V = 2;
float AXIS_LEFT = 4;
float AXIS_RIGHT = 8;
float AXIS_UP = 16;
float AXIS_DOWN = 24;
float AXIS_CTR = 32;

float DIR_UP = 1;
float DIR_DN = 2;
float DIR_LF = 3;
float DIR_RT = 4;

float OBJ_METER = 1;
float OBJ_SLIDER = 2;
float OBJ_LIST = 3;

float PAT_BAR = 1;
float PAT_SPH = 2;
float PAT_BOX = 3;
float HUD_ALPHA;

vector(vector vec, float scle) gui_scaleSize;
vector(vector sz) gui_getCenter;
vector(vector vec, float algn) gui_calcAlign;
vector(vector vec, float algn, vector org) gui_calcAlignCustom;
vector(vector org, vector sz, float axs) gui_calcAxis;
void(float val, vector org, vector sz, vector clr_bk, vector clr_fr, float setAlpha, float flg, float ax, float vdir) gui_renderMeter;
void(vector ofs, float bit, float state1, vector color1, vector color2, vector sz, float setAlpha, float flg) gui_renderModalPip;
void(string str, vector ofs, vector color, vector sz, float setAlpha, float flg) gui_renderString;
void(vector srcOrg, vector percent, string src_img, vector clipSize, vector clr, float setAlpha, float flg) gui_renderImageReel;
void(string src_img, vector tintcolor, float setAlpha, float flg) gui_renderImageFullScreen;
void(string str, vector ofs, vector txt_sz, vector ln_sz, vector clr) gui_BoxOnLabel;
void(vector ofs, vector r_sz, vector ln_sz, vector clr) gui_DrawRect;
void(float select, vector ofs, vector r_sz, vector ln_sz1, vector clr1, vector ln_sz2, vector clr2) gui_DrawHighlightRect;
vector(float val) gui_getColorForArmor;
vector(float val) gui_getColorForShield;
void(float bool, vector org, string img, vector i_sz, vector tnt_clr, float setAlpha, float flg) gui_renderTintImage;
void(float bool, vector org, string img, vector i_sz, vector tnt_clr, vector nrm_clr, float setAlpha, float flg) gui_renderTintImage2;
vector(float dmg_type) gui_colorForWeaponType;
void(string str, vector ofs, vector hclr, vector clr, float bool, vector sz, float setAlpha, float flg) gui_renderHighlightString;
vector(vector areaMins, vector areaMinAndMax, vector objectCoords, vector uiOffsetStart, vector uiAreaSize) gui_mapCoordToImgCoord;
string(float navname) gui_getNavName;
void(vector ofs, float bool, vector color1, vector color2, vector sz, float setAlpha, float flg) gui_renderModalFill;
vector(float pcx, float pcy) gui_percentToPixel;
float(float pcx) gui_percentX;
float(float pcy) gui_percentY;
float(float ang) anglemod;
string(float anglee) gui_angleToNav;
float(float anglee) gui_angleToEnum;
vector(float bits, float dead, float ok, float wrange, float prange) gui_getWepStatusColor

vector(float pcx, float pcy) gui_percentToPixelRaw;
float(float pcx) gui_percentXRaw;
float(float pcy) gui_percentYRaw;
vector(vector p) gui_percentToPixelRawVec;
vector(vector pct, vector org_size, vector dest_size) gui_percentCustomVec;
float(float pct, float ox, float mx) gui_percentCustom;

float(vector loc, vector area, string text, vector fsize, vector clr, float alph) gui_wrapText;
void(string tipMessage, vector targetSize, vector fontSize, string panelImage, vector cursorOffset, vector textColor, vector boxColor, float alph ) gui_toolTipMessage;
void( vector tipOrg ) gui_renderTooltipIcon;
float( float desiredColor, float startColor, float colorRate ) gui_colorFadeTo;

//console logging
void(string msg, float val) cons_logAFloat;
void(string msg, vector v1) cons_logAVector;
void(string msg, string s1) cons_logAString;

void(string msg, float val, string split, float val2) cons_log2Float;
void(string msg, vector v1, string split, vector v2) cons_log2Vectors;
void(string msg, string s1, string split, string s2) cons_log2Strings;
