/*
battleMETAL
Author: Peter Roohr
Date: 8/27/2016
mod: 11/16/2018
Overview: function extensions to world.qc
*/

//GLOBALS
float CLIENTS;
float MISSION_STATUS;     //used to track whether player WON or LOST the current mission.
float MISSION_RESULT;     //
float GAMETYPE;
float STARTTIME;
float ENDTIME_LIMIT;

float ENDROUND;           //sv_checkRules sets this so ending is next frame-ish;
float ENDROUND_TIME;      //sv_checkRules sets this so ending is next frame-ish;

float OBJECTIVE_FAILED;   //global to handle map objective state changes on fail.

string SERVER_INFO;

void() world_ini_serverinfo;

entity WeatherDominator;  //global weather controlling entity.
vector WINDDIR; //these get set by worldspawn but are here because 
void() WeatherDominator_think;

float TE_STOMP_TYPE;  //set by world type

.float old_speed; //used for some func_train fun.

float DEPLOY_ID_COUNT;  //auto-assign deploy point id's to never have to worry about uniqueness?

//EXTENSIONS
.float ignoreSave;  //tells savefile system to NOT save any progress data from this
.float client_num;
.string missionFile;  //data/map_scripts/<map_name>/<map_name>.msn
.float itemOverride; //if present, this tells client to load an override file in <map_name>/<map_name>.sav
.float animaticOnly;  //map is used solely to play an animatic
.string unlockMechs;  //determines unlock mechs given to the player.
.string unlockEquip;  //determines unlock equip given to the player.

//DEPRECATED
.entity particleCube; //used by mech/map/map_particlecube_effect.qc
.vector wind;

//Unlock Data for network play - data validation
float WORLD_DATA_MECHS_SURVEST[64]; //when co-op, this is all players
float WORLD_DATA_ITEMS_SURVEST[64];

float WORLD_DATA_MECHS_MILITAR[64];
float WORLD_DATA_ITEMS_MILITAR[64];

void() SV_Shutdown;
void() RestoreGame;

void() sv_world_load_items;
void() sv_checkRules;
void() sv_endServer;

void() world_metal_ini;
void() world_get_fog;

//RTLight converter system---------------------------------------------
.float rtlShadows; //FALSE = write nothin | TRUE = write '!'
//.vector rtlOrigin; -> light ent's .origin
.float rtlRadius;  //functionally equivalent to .light but doesn't trigger bsp light calc
//.vector color; -> already covered
.float rtlStyle;
//.string vec_name; -> write out as 'cubemap'
.float rtlCorona;
//.vector angles; -> light ent's .angles
.float rtlCoronaSize;
.float rtlAmbient;
.float rtlDiffuse;
.float rtlSpecular;
.float rtlMode;
/*
  0 = normalmode NO && realtimemode NO
  1 = normalmode YES && realtimemode NO
  2 = normalmode NO && realtimemode YES
  3 = normalmode YES && realtimemode YES
*/
void( float overrideFlag ) world_export_realtimelights;
void( entity lightEnt, float fileData ) world_export_realtimelights_write;

//dynamic lights (dlights)
//extends classic lightmap lights into a more dynamic/controllable format.
void( vector org, entity parent, float id, vector colr, float stile, float pFlags, vector angles, float skinNum, float lightRadius ) world_dlight_make;
void( entity parent ) world_dlight_remove;
void( entity parent, float lightId, vector newColor, float newRadius, float newStyle, vector newAngl) world_dlight_update;

//AI NODEGRAPH system--------------------------------------------------------
/*
  1) ai_node_paths are placed in map editor
  2) export using quake C and precompute valid edges
  3) map load -> load nodegraph data
  4) Use the resulting data structure (ents? Arrays of ints?)
  5) To run a pathfinding algorithm in the AI
*/

float NODEGRAPH_LOADED;
float NODEGRAPH_MAX = 1024;
//Edge validation rules
float NODEGRAPH_DBG_ID1 = 6;
float NODEGRAPH_DBG_ID2 = 5;

float NODEGRAPH_EDGE_GRID = 32; // when checking edge links
float NODEGRAPH_EDGE_ANGLE_MAX = 315;
float NODEGRAPH_EDGE_ANGLE_MIN = 45;
float NODEGRAPH_EDGE_CHECK_CACHE[6];
entity NODEGRAPH_EXPORT_NODE[1024];

typedef struct
{
  float id;
  vector orig;
  float nodes[6];
  float edges[6];
} node_t;

node_t NODEGRAPH_DATA[1024];

/*vector NODEGRAPH_SEARCH_QUEUE[512];
vector NODEGRAPH_ORIGIN[1024];
float NODEGRAPH_EDGES1[1024];
float NODEGRAPH_EDGES2[1024];
float NODEGRAPH_EDGES3[1024];
float NODEGRAPH_EDGES4[1024];
float NODEGRAPH_EDGES5[1024];
float NODEGRAPH_EDGES6[1024];

float NODEGRAPH_EDGES_LEN1[1024];
float NODEGRAPH_EDGES_LEN2[1024];
float NODEGRAPH_EDGES_LEN3[1024];
float NODEGRAPH_EDGES_LEN4[1024];
float NODEGRAPH_EDGES_LEN5[1024];
float NODEGRAPH_EDGES_LEN6[1024];*/

float NODE_ID_COUNT;

void() nodegraph_edgelinker_th;
entity nodegraph_edgelinker;  //lock the processing time to the game timer so we don't kill temp buffers

void( float overrideFlag ) world_nodegraph_export_data;
void(entity node, float fileData ) world_nodegraph_export_write_node;
float( entity node, entity targNode ) world_nodegraph_export_edgelink;

void() world_nodegraph_import;
void() world_nodegraph_read_file;
void( float nodeCounter, float nodeId, vector org, string edgeDat) world_nodegraph_read_node;

//MISC
entity() world_deathmatch_random_spawn;
string WORLD_MAP_LIST;
void() world_get_maplist; //TDM/DM network games use this list.