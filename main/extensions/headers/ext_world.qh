/*
battleMETAL
Author: Peter Roohr
Date: 8/27/2016
mod: 11/16/2018
Overview: function extensions to world.qc
*/

//GLOBALS
float CLIENTS;
float MISSION_STATUS;     //used to track whether player WON or LOST the current mission.
float MISSION_RESULT;     //
float GAMETYPE;
float STARTTIME;
float ENDTIME_LIMIT;
float TECHLEVEL;

float ENDROUND;           //sv_checkRules sets this so ending is next frame-ish;
float ENDROUND_TIME;      //sv_checkRules sets this so ending is next frame-ish;


string SERVER_INFO;

void() world_ini_serverinfo;

entity WeatherDominator;  //global weather controlling entity.
vector WINDDIR; //these get set by worldspawn but are here because 
void() WeatherDominator_think;

float TE_STOMP_TYPE;  //set by world type

//EXTENSIONS
.float client_num;

.string missionFile;  //data/map_scripts/<map_name>/<map_name>.msn
.string mapFile;      //data/map_scripts/<map_name>/<map_name>.sav

.string unlockMechs;  //determines unlock mechs given to the player.
.string unlockEquip;  //determines unlock equip given to the player.
.string itemOverrideFile; //if present, send this file of items instead of normal save file
.float ignoreSave;    //don't save at end of mission
.float animaticOnly;  //map is used solely to play an animatic

.entity particleCube; //used by mech/map/map_particlecube_effect.qc
.vector wind;

//Unlock Data for network play
float WORLD_DATA_MECHS_SURVEST[64]; //when co-op, this is all players
float WORLD_DATA_ITEMS_SURVEST[64];

float WORLD_DATA_MECHS_MILITAR[64];
float WORLD_DATA_ITEMS_MILITAR[64];

void() sv_world_load_items;
void() sv_checkRules;
void() sv_endServer;

void() mh_world_ini;
void() world_get_fog;

//RTLight converter system---------------------------------------------
.float rtlShadows; //FALSE = write nothin | TRUE = write '!'
//.vector rtlOrigin; -> light ent's .origin
.float rtlRadius;  //functionally equivalent to .light but doesn't trigger bsp light calc
//.vector color; -> already covered
.float rtlStyle;
//.string vec_name; -> write out as 'cubemap'
.float rtlCorona;
//.vector angles; -> light ent's .angles
.float rtlCoronaSize;
.float rtlAmbient;
.float rtlDiffuse;
.float rtlSpecular;
.float rtlMode;
/*
  0 = normalmode NO && realtimemode NO
  1 = normalmode YES && realtimemode NO
  2 = normalmode NO && realtimemode YES
  3 = normalmode YES && realtimemode YES
*/

void( float overrideFlag ) world_export_realtimelights;
void( entity light, float fileData ) world_export_realtimelights_write;

//dynamic lights (dlights)
//extends classic lightmap lights into a more dynamic/controllable format.
void( vector org, entity parent, float id, vector colr, float stile, float pFlags, vector angles, float skinNum, float lightRadius ) world_make_dlight;
void( entity parent ) world_remove_dlight;
void( entity parent, float lightId, vector newColor, float newRadius, float newStyle, vector newAngl) world_update_dlight;

